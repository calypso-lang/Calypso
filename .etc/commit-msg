#!/usr/bin/env python
# Lint commit messages.

import sys

def main():
    with open(sys.argv[1], "r") as f:
        lines = f.readlines()

        errors = []

        for idx, line in enumerate(lines):
            if line.strip() == "# ------------------------ >8 ------------------------":
                break

            if line.startswith("#"):
                continue

            errors += verify(idx, line)

        # Deduplicate error list
        errors, old_errors = [], errors
        [errors.append(x) for x in old_errors if x not in errors]

        if len(errors) == 0:
            return

        print("The following problems were detected with your commit message:\n")

        for error in errors:
            print(f"- {error}\n")

        print("Commit aborted.")

        sys.exit(-1)

def verify(idx, line):
    errors = []

    if idx == 0:
        errors += verify_short(line)

    if idx == 1 and line.strip():
        errors.append("The second line of a commit message should be empty, in order to separate the\n    short message of the commit with the body.")

    if len(line.strip()) > 72:
        errors.append("The body of a commit should be wrapped to 72 characters.")

    return errors

def verify_short(line):
    errors = []

    if len(line.strip()) == 0:
        # We can't verify anything about the short message if it's empty.
        return ["The short message of a commit should not be empty."]

    if line.strip()[-1] == ".":
        errors.append("The short message of a commit should not end with a period.")

    if len(line) > 50:
        errors.append("The short message of a commit should not be longer than 50 characters.")

    return errors

if __name__ == "__main__":
    main()
